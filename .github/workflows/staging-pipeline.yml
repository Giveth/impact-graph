name: staging-pipeline

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

jobs:
  run-linters:
    name: Run linters
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 20.11.0

      # ESLint and Prettier must be in `package.json`
      - name: Install Node.js dependencies
        run: npm ci

      - name: Run linters
        uses: wearerequired/lint-action@v2
        with:
          eslint: true
          #prettier: true
          continue_on_error: true

  test:
    runs-on: ubuntu-latest
    needs: run-linters
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      postgres:
        # Use this postgres image https://github.com/Giveth/postgres-givethio
        image: ghcr.io/giveth/postgres-givethio:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: givethio
          PGDATA: /var/lib/postgresql/data/pgdata
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5443:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}

      - name: Download latest DB backup from S3
        run: |
          FILENAME=$(aws s3 ls ${{ secrets.AWS_S3_BUCKET_PATH_STAGING }}/ | sort | tail -n 1 | awk '{print $4}')
          aws s3 cp ${{ secrets.AWS_S3_BUCKET_PATH_STAGING }}/$FILENAME /tmp/db_backup.zip

      - name: Unzip DB backup
        run: |
          unzip /tmp/db_backup.zip -d /tmp
          mv /tmp/backups/givethio-staging/*.sql /tmp/backups/givethio-staging/db_backup.sql

      - name: Wait for PostgreSQL to become ready
        run: |
          for i in {1..10}
          do
            pg_isready -h localhost -p 5443 -U postgres && echo Success && break
            echo -n .
            sleep 1
          done

      - name: Restore DB backup
        run: PGPASSWORD=postgres psql -h localhost -p 5443 -U postgres -d givethio < /tmp/backups/givethio-staging/db_backup.sql

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 20.11.0

      - name: Install dependencies
        run: npm ci

      - name: Run eslint
        run: npm run eslint

      - name: Run build
        run: npm run build

      - name: Run migrations
        run: npm run db:migrate:run:test

      - name: Run tests
        run: npm run test
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          XDAI_NODE_HTTP_URL: ${{ secrets.XDAI_NODE_HTTP_URL }}
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          INFURA_ID: ${{ secrets.INFURA_ID }}
          POLYGON_SCAN_API_KEY: ${{ secrets.POLYGON_SCAN_API_KEY }}
          OPTIMISTIC_SCAN_API_KEY: ${{ secrets.OPTIMISTIC_SCAN_API_KEY }}
          CELO_SCAN_API_KEY: ${{ secrets.CELO_SCAN_API_KEY }}
          CELO_ALFAJORES_SCAN_API_KEY: ${{ secrets.CELO_ALFAJORES_SCAN_API_KEY }}
          ARBITRUM_SCAN_API_KEY: ${{ secrets.ARBITRUM_SCAN_API_KEY }}
          ARBITRUM_SEPOLIA_SCAN_API_KEY: ${{ secrets.ARBITRUM_SEPOLIA_SCAN_API_KEY }}
          BASE_SCAN_API_KEY: ${{ secrets.BASE_SCAN_API_KEY }}
          BASE_SEPOLIA_SCAN_API_KEY: ${{ secrets.BASE_SEPOLIA_SCAN_API_KEY }}
          ZKEVM_MAINNET_SCAN_API_KEY: ${{ secrets.ZKEVM_MAINNET_SCAN_API_KEY }}
          ZKEVM_CARDONA_SCAN_API_KEY: ${{ secrets.ZKEVM_CARDONA_SCAN_API_KEY }}
          MORDOR_ETC_TESTNET: ${{ secrets.MORDOR_ETC_TESTNET }}
          ETC_NODE_HTTP_URL: ${{ secrets.ETC_NODE_HTTP_URL }}
          DROP_DATABASE: ${{ secrets.DROP_DATABASE_DURING_TEST_STAGING }}
          SOLANA_TEST_NODE_RPC_URL: ${{ secrets.SOLANA_TEST_NODE_RPC_URL }}
          SOLANA_DEVNET_NODE_RPC_URL: ${{ secrets.SOLANA_DEVNET_NODE_RPC_URL }}
          SOLANA_MAINNET_NODE_RPC_URL: ${{ secrets.SOLANA_MAINNET_NODE_RPC_URL }}
          MPETH_GRAPHQL_PRICES_URL: ${{ secrets.MPETH_GRAPHQL_PRICES_URL }}
          GIV_POWER_SUBGRAPH_URL: ${{ secrets.GIV_POWER_SUBGRAPH_URL }}
          VERIFY_RIGHT_URL: ${{ secrets.VERIFY_RIGHT_URL }}
          VERIFY_RIGHT_TOKEN: ${{ secrets.VERIFY_RIGHT_TOKEN }}

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build image and push to GitHub Packages
        uses: docker/build-push-action@v6
        with:
          push: true
          no-cache: true
          repository: giveth/impact-graph
          tags: |
            ghcr.io/giveth/impact-graph:staging
            ghcr.io/giveth/impact-graph:${{ github.sha }}

  deploy:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: SSH and Redeploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST_ALL }}
          username: ${{ secrets.STAGING_USERNAME_ALL }}
          key: ${{ secrets.STAGING_PRIVATE_KEY_ALL }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd giveth-all
            git reset --hard origin/staging
            git checkout staging
            git pull origin staging
            docker image prune -a --force
            docker compose pull

  rollout-deploy-1:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: SSH and Redeploy - First Phase
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST_ALL }}
          username: ${{ secrets.STAGING_USERNAME_ALL }}
          key: ${{ secrets.STAGING_PRIVATE_KEY_ALL }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd giveth-all
            ## Update each backend service one by one
            ## First Deployment - Jobs instance and first GraphQL instance
            docker compose rm -fs impact-graph-graphql-1
            docker compose rm -fs impact-graph-jobs
            docker compose up --force-recreate -d impact-graph-graphql-1
            docker compose up --force-recreate -d impact-graph-jobs

            # Wait for impact-graph-graphql-1 to be healthy (timeout after 5 minutes)
            echo "Waiting for impact-graph-graphql-1 to become healthy..."
            timeout 300 bash -c 'until [ "$(docker inspect --format="{{json .State.Health.Status}}" impact-graph-graphql-1)" == "\"healthy\"" ]; do echo "Waiting for impact-graph-graphql-1 to be healthy..."; sleep 5; done'
            if [ $? -eq 124 ]; then
                echo "Timeout waiting for impact-graph-graphql-1 to become healthy"
                exit 1
            fi

            # Check if impact-graph-graphql-1 is healthy
            if [ "$(docker inspect --format='{{json .State.Health.Status}}' impact-graph-graphql-1)" != "\"healthy\"" ]; then
                echo "impact-graph-graphql-1 is not healthy, stopping deployment"
                exit 1
            fi

            # Check if impact-graph-jobs is running
            if [ "$(docker inspect --format='{{json .State.Status}}' impact-graph-jobs)" != "\"running\"" ]; then
                echo "impact-graph-jobs is not running, stopping deployment"
                exit 1
            fi
            echo "First deployment phase completed successfully"

  rollout-deploy-2:
    needs: rollout-deploy-1
    runs-on: ubuntu-latest
    steps:
      - name: SSH and Redeploy - Second Phase
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST_ALL }}
          username: ${{ secrets.STAGING_USERNAME_ALL }}
          key: ${{ secrets.STAGING_PRIVATE_KEY_ALL }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd giveth-all
            ## Second Deployment
            docker compose rm -fs impact-graph-graphql-2
            docker compose up --force-recreate -d impact-graph-graphql-2

            # Wait for impact-graph-graphql-2 to be healthy (timeout after 5 minutes)
            echo "Waiting for impact-graph-graphql-2 to become healthy..."
            timeout 300 bash -c 'until [ "$(docker inspect --format="{{json .State.Health.Status}}" impact-graph-graphql-2)" == "\"healthy\"" ]; do echo "Waiting for impact-graph-graphql-2 to be healthy..."; sleep 5; done'
            if [ $? -eq 124 ]; then
                echo "Timeout waiting for impact-graph-graphql-2 to become healthy"
                exit 1
            fi

            # Check if impact-graph-graphql-2 is healthy
            if [ "$(docker inspect --format='{{json .State.Health.Status}}' impact-graph-graphql-2)" != "\"healthy\"" ]; then
                echo "impact-graph-graphql-2 is not healthy, stopping deployment"
                exit 1
            fi
            echo "Second deployment phase completed successfully"

  rollout-deploy-3:
    needs: rollout-deploy-2
    runs-on: ubuntu-latest
    steps:
      - name: SSH and Redeploy - Third Phase
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST_ALL }}
          username: ${{ secrets.STAGING_USERNAME_ALL }}
          key: ${{ secrets.STAGING_PRIVATE_KEY_ALL }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd giveth-all
            ## Third Deployment
            docker compose rm -fs impact-graph-graphql-3
            docker compose up --force-recreate -d impact-graph-graphql-3

            # Wait for impact-graph-graphql-3 to be healthy (timeout after 5 minutes)
            echo "Waiting for impact-graph-graphql-3 to become healthy..."
            timeout 300 bash -c 'until [ "$(docker inspect --format="{{json .State.Health.Status}}" impact-graph-graphql-3)" == "\"healthy\"" ]; do echo "Waiting for impact-graph-graphql-3 to be healthy..."; sleep 5; done'
            if [ $? -eq 124 ]; then
                echo "Timeout waiting for impact-graph-graphql-3 to become healthy"
                exit 1
            fi

            # Check if impact-graph-graphql-3 is healthy
            if [ "$(docker inspect --format='{{json .State.Health.Status}}' impact-graph-graphql-3)" != "\"healthy\"" ]; then
                echo "impact-graph-graphql-3 is not healthy, stopping deployment"
                exit 1
            fi
            echo "Third deployment phase completed successfully"

  deployment-verification:
    needs: rollout-deploy-3
    runs-on: ubuntu-latest
    steps:
      - name: Verify All Services
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST_ALL }}
          username: ${{ secrets.STAGING_USERNAME_ALL }}
          key: ${{ secrets.STAGING_PRIVATE_KEY_ALL }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd giveth-all
            echo "=== Final Deployment Verification ==="
            
            # Check all GraphQL instances health status
            for service in impact-graph-graphql-1 impact-graph-graphql-2 impact-graph-graphql-3; do
              health_status=$(docker inspect --format='{{json .State.Health.Status}}' $service 2>/dev/null || echo "\"not_found\"")
              echo "$service health status: $health_status"
              if [ "$health_status" != "\"healthy\"" ]; then
                echo "ERROR: $service is not healthy!"
                exit 1
              fi
            done
            
            # Check jobs instance status
            jobs_status=$(docker inspect --format='{{json .State.Status}}' impact-graph-jobs 2>/dev/null || echo "\"not_found\"")
            echo "impact-graph-jobs status: $jobs_status"
            if [ "$jobs_status" != "\"running\"" ]; then
              echo "ERROR: impact-graph-jobs is not running!"
              exit 1
            fi
            
            echo "=== All services are healthy and running! ==="
            echo "Deployment completed successfully at $(date)"
