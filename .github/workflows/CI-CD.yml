name:  CI/CD

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: givethio
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.14.2
      - name: Install dependencies
        run: npm ci
      - name: Run tslint
        run: npm run tslint
      - name: Run migrations
        run: npm run typeorm:cli:test -- migration:run
      - name: Run tests
        run: npm run test
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          XDAI_NODE_HTTP_URL: ${{ secrets.XDAI_NODE_HTTP_URL }}
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          ETHEREUM_NODE_ID: ${{ secrets.INFURA_API_KEY }}

  publish:
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/staging'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Build image and push to GitHub Packages
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ github.token }}
          registry: ghcr.io
          repository: giveth/impact-graph
          add_git_labels: true
          # Add branch name to docker image tag @see{@link https://github.com/docker/build-push-action/tree/releases/v1#tag_with_ref}
          tag_with_ref: true
          # Add commit hash to docker image tag @see{@link https://github.com/docker/build-push-action/tree/releases/v1#tag_with_sha}
          tag_with_sha: true

  deploy:
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'|| github.ref == 'refs/heads/staging'
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Staging deploy
        if: github.ref == 'refs/heads/staging'
        uses: garygrossgarten/github-action-ssh@v0.6.4
        with:
          command: cd impact-graph && git checkout staging && git pull &&  docker-compose -f docker-compose-staging.yml pull && docker-compose -f docker-compose-staging.yml down && docker-compose -f docker-compose-staging.yml up -d && docker image prune -a --force;
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          privateKey: ${{ secrets.STAGING_PRIVATE_KEY}}

      - name: Develop deploy
        if: github.ref == 'refs/heads/develop'
        uses: garygrossgarten/github-action-ssh@v0.6.4
        with:
          command: cd impact-graph && git checkout develop && git pull &&  docker-compose -f docker-compose-develop.yml pull && docker-compose -f docker-compose-develop.yml down && docker-compose -f docker-compose-develop.yml up -d && docker image prune -a --force;
          host: ${{ secrets.DEVELOP_HOST }}
          username: ${{ secrets.DEVELOP_USERNAME }}
          privateKey: ${{ secrets.DEVELOP_PRIVATE_KEY}}

      - name: Production deploy
        if: github.ref == 'refs/heads/master'
        uses: garygrossgarten/github-action-ssh@v0.6.4
        with:
          command: cd impact-graph && git checkout master && git pull &&  docker-compose -f docker-compose-production.yml pull && docker-compose -f docker-compose-production.yml down && docker-compose -f docker-compose-production.yml up -d && docker image prune -a --force;
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          privateKey: ${{ secrets.PRODUCTION_PRIVATE_KEY}}

