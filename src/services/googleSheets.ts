import { GoogleSpreadsheet } from 'google-spreadsheet';
import config from '../config';
import { logger } from '../utils/logger';

// tslint:disable-next-line:no-var-requires
const moment = require('moment');

export const projectExportSpreadsheet = async (): Promise<
  typeof GoogleSpreadsheet
> => {
  // Initialize the sheet - document ID is the long id in the sheets URL
  const spreadSheet = new GoogleSpreadsheet(
    config.get('GOOGLE_PROJECT_EXPORTS_SPREADSHEET_ID'),
  );

  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await spreadSheet.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: config.get('GOOGLE_SPREADSHEETS_CLIENT_EMAIL'),
    private_key: config.get('GOOGLE_SPREADSHEETS_PRIVATE_KEY'),
  });

  return spreadSheet;
};

export const addSheetWithRows = async (
  spreadSheet: GoogleSpreadsheet,
  headers: string[],
  rows: {
    id: number;
    title: string;
    slug?: string;
    admin?: string;
    creationDate: Date;
    updatedAt: Date;
    impactLocation?: string;
    walletAddress?: string;
    statusId: number;
    qualityScore: number;
    verified: boolean;
    listed: boolean;
    totalDonations: number;
    totalProjectUpdates: number;
    website: string;
    email: string;
    firstWalletAddress: string;
    firstWalletAddressNetwork: string;
    secondWalletAddress: string;
    secondWalletAddressNetwork: string;
  }[],
): Promise<void> => {
  try {
    const currentDate = moment().toDate();

    const sheet = await spreadSheet.addSheet({
      headerValues: headers,
      title: `export ${currentDate.toDateString()} ${currentDate.getTime()}`,
    });
    await sheet.addRows(rows);
  } catch (e) {
    logger.error('addSheetWithRows error', e);
    throw e;
  }
};
